apply plugin: 'maven-publish'
apply plugin: "com.gradle.plugin-publish"

group = 'com.github.johnrengelman'

def versionString = file('src/main/resources/shadow-version.txt').text.trim()
if (System.env.CIRCLE_TAG && System.env.CIRCLE_TAG =~  /^\d\.\d\.\d$/) {
    version = System.env.CIRCLE_TAG
} else {
    version = versionString
    if (!version.endsWith("-SNAPSHOT")) {
        version = version + "-SNAPSHOT"
    }
}

ext.isSnapshot = version.endsWith("SNAPSHOT")

def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'jengelman'
            name 'John Engelman'
            email 'john.r.engelman@gmail.com'
        }
    }
}

publishing {
    publications {
        plugin(MavenPublication) {
            shadow.component(it)
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Gradle plugin to combine/relocate dependencies in a single Jar.')
                root.children().last() + pomConfig
            }
        }
    }
}

// Workaround for configuring the artifact that publish-plugins uses: https://github.com/JLLeitschuh/ktlint-gradle/blob/master/plugin/build.gradle.kts
// Need to move publishing configuration into afterEvaluate {}
// to override changes done by "com.gradle.plugin-publish" plugin in afterEvaluate {} block
// See PublishPlugin class for details
afterEvaluate {
    publishing {
        publications {
            withType(MavenPublication) {
                // Special workaround to publish shadow jar instead of normal one. Name to override peeked here:
                // https://github.com/gradle/gradle/blob/master/subprojects/plugin-development/src/main/java/org/gradle/plugin/devel/plugins/MavenPluginPublishPlugin.java#L73
                if (name == "pluginMaven") {
                    setArtifacts([
                        tasks.shadowJar,
                        tasks.sourcesJar,
                        tasks.javadocJar
                    ])
                }
            }
        }
    }
}

tasks.whenTaskAdded {
    if (name == "publishPluginJar" || name == "generateMetadataFileForPluginMavenPublication") {
        dependsOn(tasks.named("shadowJar"))
    }
}

pluginBundle {
    website = 'https://github.com/johnrengelman/shadow'
    vcsUrl = 'https://github.com/johnrengelman/shadow'
    tags = ['onejar', 'shade', 'fatjar', 'uberjar']

    plugins {
        shadowPlugin {
            id = 'com.github.johnrengelman.shadow'
            displayName = 'Shadow Plugin'
            description = "Gradle plugin to create fat/uber JARs, apply file transforms, and relocate packages for applications and libraries. Gradle version of Maven's Shade plugin."
        }
    }
}

publishPlugins { task ->
    doFirst {
        if (isSnapshot) {
            throw new GradleException('Cannot publish SNAPSHOT versions to Plugin Portal!')
        }
    }
}

signing {
    if (System.env.CI == 'true') {
        def encodedSigningKey = findProperty("signingKey")
        def signingKey = encodedSigningKey ? new String(encodedSigningKey.decodeBase64()) : null
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    required {
        gradle.taskGraph.hasTask("artifactoryPublish")
    }
    sign publishing.publications.plugin
}

task release() {
    dependsOn 'assemble', 'publishPlugins', 'gitPublishPush'
}
