public abstract class com/github/jengelman/gradle/plugins/shadow/ShadowApplicationPlugin : org/gradle/api/Plugin {
	public static final field Companion Lcom/github/jengelman/gradle/plugins/shadow/ShadowApplicationPlugin$Companion;
	public static final field SHADOW_INSTALL_TASK_NAME Ljava/lang/String;
	public static final field SHADOW_RUN_TASK_NAME Ljava/lang/String;
	public static final field SHADOW_SCRIPTS_TASK_NAME Ljava/lang/String;
	public fun <init> ()V
	protected fun addCreateScriptsTask (Lorg/gradle/api/Project;)V
	protected fun addRunTask (Lorg/gradle/api/Project;)V
	public synthetic fun apply (Ljava/lang/Object;)V
	public fun apply (Lorg/gradle/api/Project;)V
	protected fun configureDistribution (Lorg/gradle/api/Project;)V
	protected fun configureInstallTask (Lorg/gradle/api/Project;)V
	protected fun configureShadowJarMainClass (Lorg/gradle/api/Project;)V
}

public final class com/github/jengelman/gradle/plugins/shadow/ShadowApplicationPlugin$Companion {
	public final fun getInstallShadowDist (Lorg/gradle/api/tasks/TaskContainer;)Lorg/gradle/api/tasks/TaskProvider;
	public final fun getStartShadowScripts (Lorg/gradle/api/tasks/TaskContainer;)Lorg/gradle/api/tasks/TaskProvider;
}

public abstract class com/github/jengelman/gradle/plugins/shadow/ShadowBasePlugin : org/gradle/api/Plugin {
	public static final field COMPONENT_NAME Ljava/lang/String;
	public static final field CONFIGURATION_NAME Ljava/lang/String;
	public static final field Companion Lcom/github/jengelman/gradle/plugins/shadow/ShadowBasePlugin$Companion;
	public static final field DISTRIBUTION_NAME Ljava/lang/String;
	public static final field EXTENSION_NAME Ljava/lang/String;
	public static final field SHADOW Ljava/lang/String;
	public fun <init> ()V
	public synthetic fun apply (Ljava/lang/Object;)V
	public fun apply (Lorg/gradle/api/Project;)V
}

public final class com/github/jengelman/gradle/plugins/shadow/ShadowBasePlugin$Companion {
	public final fun getShadow (Lorg/gradle/api/artifacts/ConfigurationContainer;)Lorg/gradle/api/NamedDomainObjectProvider;
}

public abstract class com/github/jengelman/gradle/plugins/shadow/ShadowExtension {
	public fun <init> (Lorg/gradle/api/Project;)V
	public final fun component (Lorg/gradle/api/publish/maven/MavenPublication;)V
}

public abstract class com/github/jengelman/gradle/plugins/shadow/ShadowJavaPlugin : org/gradle/api/Plugin {
	public static final field Companion Lcom/github/jengelman/gradle/plugins/shadow/ShadowJavaPlugin$Companion;
	public static final field SHADOW_JAR_TASK_NAME Ljava/lang/String;
	public static final field SHADOW_RUNTIME_ELEMENTS_CONFIGURATION_NAME Ljava/lang/String;
	public fun <init> (Lorg/gradle/api/component/SoftwareComponentFactory;)V
	public synthetic fun apply (Ljava/lang/Object;)V
	public fun apply (Lorg/gradle/api/Project;)V
	protected fun configureComponents (Lorg/gradle/api/Project;)V
	protected fun configureConfigurations (Lorg/gradle/api/Project;)V
	protected fun configureJavaGradlePlugin (Lorg/gradle/api/Project;)V
	protected fun configureShadowJar (Lorg/gradle/api/Project;)V
	public static final fun registerShadowJarCommon (Lorg/gradle/api/Project;Lorg/gradle/api/Action;)Lorg/gradle/api/tasks/TaskProvider;
}

public final class com/github/jengelman/gradle/plugins/shadow/ShadowJavaPlugin$Companion {
	public final fun getShadowJar (Lorg/gradle/api/tasks/TaskContainer;)Lorg/gradle/api/tasks/TaskProvider;
	public final fun getShadowRuntimeElements (Lorg/gradle/api/artifacts/ConfigurationContainer;)Lorg/gradle/api/NamedDomainObjectProvider;
	public final fun registerShadowJarCommon (Lorg/gradle/api/Project;Lorg/gradle/api/Action;)Lorg/gradle/api/tasks/TaskProvider;
}

public abstract class com/github/jengelman/gradle/plugins/shadow/ShadowKmpPlugin : org/gradle/api/Plugin {
	public fun <init> ()V
	public synthetic fun apply (Ljava/lang/Object;)V
	public fun apply (Lorg/gradle/api/Project;)V
}

public abstract class com/github/jengelman/gradle/plugins/shadow/ShadowPlugin : org/gradle/api/Plugin {
	public static final field Companion Lcom/github/jengelman/gradle/plugins/shadow/ShadowPlugin$Companion;
	public static final field ENABLE_DEVELOCITY_INTEGRATION_PROPERTY Ljava/lang/String;
	public fun <init> ()V
	public synthetic fun apply (Ljava/lang/Object;)V
	public fun apply (Lorg/gradle/api/Project;)V
}

public final class com/github/jengelman/gradle/plugins/shadow/ShadowPlugin$Companion {
}

public abstract class com/github/jengelman/gradle/plugins/shadow/legacy/LegacyShadowPlugin : org/gradle/api/Plugin {
	public fun <init> ()V
	public synthetic fun apply (Ljava/lang/Object;)V
	public fun apply (Lorg/gradle/api/Project;)V
}

public abstract interface annotation class com/github/jengelman/gradle/plugins/shadow/relocation/CacheableRelocator : java/lang/annotation/Annotation {
}

public final class com/github/jengelman/gradle/plugins/shadow/relocation/RelocateClassContext {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lcom/github/jengelman/gradle/plugins/shadow/relocation/RelocateClassContext;
	public static synthetic fun copy$default (Lcom/github/jengelman/gradle/plugins/shadow/relocation/RelocateClassContext;Ljava/lang/String;ILjava/lang/Object;)Lcom/github/jengelman/gradle/plugins/shadow/relocation/RelocateClassContext;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getClassName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/github/jengelman/gradle/plugins/shadow/relocation/RelocatePathContext {
	public fun <init> (Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;)Lcom/github/jengelman/gradle/plugins/shadow/relocation/RelocatePathContext;
	public static synthetic fun copy$default (Lcom/github/jengelman/gradle/plugins/shadow/relocation/RelocatePathContext;Ljava/lang/String;ILjava/lang/Object;)Lcom/github/jengelman/gradle/plugins/shadow/relocation/RelocatePathContext;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getPath ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/github/jengelman/gradle/plugins/shadow/relocation/RelocationContextKt {
	public static final fun relocateClass (Lcom/github/jengelman/gradle/plugins/shadow/relocation/Relocator;Ljava/lang/String;)Ljava/lang/String;
	public static final fun relocatePath (Lcom/github/jengelman/gradle/plugins/shadow/relocation/Relocator;Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class com/github/jengelman/gradle/plugins/shadow/relocation/Relocator {
	public static final field Companion Lcom/github/jengelman/gradle/plugins/shadow/relocation/Relocator$Companion;
	public abstract fun applyToSourceContent (Ljava/lang/String;)Ljava/lang/String;
	public abstract fun canRelocateClass (Ljava/lang/String;)Z
	public abstract fun canRelocatePath (Ljava/lang/String;)Z
	public fun getSkipStringConstants ()Z
	public abstract fun relocateClass (Lcom/github/jengelman/gradle/plugins/shadow/relocation/RelocateClassContext;)Ljava/lang/String;
	public abstract fun relocatePath (Lcom/github/jengelman/gradle/plugins/shadow/relocation/RelocatePathContext;)Ljava/lang/String;
}

public final class com/github/jengelman/gradle/plugins/shadow/relocation/Relocator$Companion {
	public final fun getROLE ()Ljava/lang/String;
}

public class com/github/jengelman/gradle/plugins/shadow/relocation/SimpleRelocator : com/github/jengelman/gradle/plugins/shadow/relocation/Relocator {
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Z)V
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;ZZ)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;ZZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun applyToSourceContent (Ljava/lang/String;)Ljava/lang/String;
	public fun canRelocateClass (Ljava/lang/String;)Z
	public fun canRelocatePath (Ljava/lang/String;)Z
	public fun equals (Ljava/lang/Object;)Z
	public fun exclude (Ljava/lang/String;)V
	public final fun getExcludes ()Ljava/util/Set;
	public final fun getIncludes ()Ljava/util/Set;
	public fun getSkipStringConstants ()Z
	public fun hashCode ()I
	public fun include (Ljava/lang/String;)V
	public fun relocateClass (Lcom/github/jengelman/gradle/plugins/shadow/relocation/RelocateClassContext;)Ljava/lang/String;
	public fun relocatePath (Lcom/github/jengelman/gradle/plugins/shadow/relocation/RelocatePathContext;)Ljava/lang/String;
	public fun setSkipStringConstants (Z)V
}

public abstract interface class com/github/jengelman/gradle/plugins/shadow/tasks/DependencyFilter : java/io/Serializable {
	public abstract fun dependency (Ljava/lang/Object;)Lorg/gradle/api/specs/Spec;
	public abstract fun exclude (Lorg/gradle/api/specs/Spec;)V
	public abstract fun include (Lorg/gradle/api/specs/Spec;)V
	public abstract fun project (Ljava/lang/Object;)Lorg/gradle/api/specs/Spec;
	public abstract fun resolve (Ljava/util/Collection;)Lorg/gradle/api/file/FileCollection;
	public abstract fun resolve (Lorg/gradle/api/artifacts/Configuration;)Lorg/gradle/api/file/FileCollection;
}

public abstract class com/github/jengelman/gradle/plugins/shadow/tasks/DependencyFilter$AbstractDependencyFilter : com/github/jengelman/gradle/plugins/shadow/tasks/DependencyFilter {
	public fun <init> (Lorg/gradle/api/Project;Ljava/util/List;Ljava/util/List;)V
	public synthetic fun <init> (Lorg/gradle/api/Project;Ljava/util/List;Ljava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun dependency (Ljava/lang/Object;)Lorg/gradle/api/specs/Spec;
	public fun exclude (Lorg/gradle/api/specs/Spec;)V
	protected final fun getExcludeSpecs ()Ljava/util/List;
	protected final fun getIncludeSpecs ()Ljava/util/List;
	public fun include (Lorg/gradle/api/specs/Spec;)V
	protected final fun isIncluded (Lorg/gradle/api/artifacts/ResolvedDependency;)Z
	public fun project (Ljava/lang/Object;)Lorg/gradle/api/specs/Spec;
	public fun resolve (Ljava/util/Collection;)Lorg/gradle/api/file/FileCollection;
	protected abstract fun resolve (Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;)V
	public fun resolve (Lorg/gradle/api/artifacts/Configuration;)Lorg/gradle/api/file/FileCollection;
}

public abstract interface class com/github/jengelman/gradle/plugins/shadow/tasks/InheritManifest : org/gradle/api/java/archives/Manifest {
	public fun inheritFrom ([Ljava/lang/Object;)V
	public abstract fun inheritFrom ([Ljava/lang/Object;Lorg/gradle/api/Action;)V
}

public class com/github/jengelman/gradle/plugins/shadow/tasks/ShadowCopyAction : org/gradle/api/internal/file/copy/CopyAction {
	public static final field Companion Lcom/github/jengelman/gradle/plugins/shadow/tasks/ShadowCopyAction$Companion;
	public fun <init> (Ljava/io/File;Lkotlin/jvm/functions/Function1;Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;ZZLjava/lang/String;)V
	public fun execute (Lorg/gradle/api/internal/file/copy/CopyActionProcessingStream;)Lorg/gradle/api/tasks/WorkResult;
}

public final class com/github/jengelman/gradle/plugins/shadow/tasks/ShadowCopyAction$Companion {
	public final fun getCONSTANT_TIME_FOR_ZIP_ENTRIES ()J
}

public abstract class com/github/jengelman/gradle/plugins/shadow/tasks/ShadowJar : org/gradle/api/tasks/bundling/Jar {
	public fun <init> ()V
	public fun append (Ljava/lang/String;Ljava/lang/String;)V
	public static synthetic fun append$default (Lcom/github/jengelman/gradle/plugins/shadow/tasks/ShadowJar;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)V
	protected fun copy ()V
	protected fun createCopyAction ()Lorg/gradle/api/internal/file/copy/CopyAction;
	public fun dependencies (Lorg/gradle/api/Action;)V
	public fun getApiJars ()Lorg/gradle/api/file/ConfigurableFileCollection;
	protected abstract fun getArchiveOperations ()Lorg/gradle/api/file/ArchiveOperations;
	public fun getConfigurations ()Lorg/gradle/api/provider/SetProperty;
	public fun getDependencyFilter ()Lorg/gradle/api/provider/Property;
	public fun getDuplicatesStrategy ()Lorg/gradle/api/file/DuplicatesStrategy;
	public fun getEnableAutoRelocation ()Lorg/gradle/api/provider/Property;
	public fun getExcludes ()Ljava/util/Set;
	public fun getFailOnDuplicateEntries ()Lorg/gradle/api/provider/Property;
	public fun getIncludedDependencies ()Lorg/gradle/api/file/ConfigurableFileCollection;
	public fun getIncludes ()Ljava/util/Set;
	public fun getManifest ()Lcom/github/jengelman/gradle/plugins/shadow/tasks/InheritManifest;
	public synthetic fun getManifest ()Lorg/gradle/api/java/archives/Manifest;
	public fun getMinimizeJar ()Lorg/gradle/api/provider/Property;
	public fun getRelocationPrefix ()Lorg/gradle/api/provider/Property;
	public fun getRelocators ()Lorg/gradle/api/provider/SetProperty;
	public fun getSourceSetsClassesDirs ()Lorg/gradle/api/file/ConfigurableFileCollection;
	public fun getToMinimize ()Lorg/gradle/api/file/ConfigurableFileCollection;
	public fun getTransformers ()Lorg/gradle/api/provider/SetProperty;
	public fun mergeGroovyExtensionModules ()V
	public fun mergeServiceFiles ()V
	public fun mergeServiceFiles (Ljava/lang/String;)V
	public fun mergeServiceFiles (Lorg/gradle/api/Action;)V
	public fun minimize ()V
	public fun minimize (Lorg/gradle/api/Action;)V
	public fun relocate (Lcom/github/jengelman/gradle/plugins/shadow/relocation/Relocator;Lorg/gradle/api/Action;)V
	public fun relocate (Ljava/lang/Class;Lorg/gradle/api/Action;)V
	public fun relocate (Ljava/lang/String;Ljava/lang/String;Lorg/gradle/api/Action;)V
	public static synthetic fun relocate$default (Lcom/github/jengelman/gradle/plugins/shadow/tasks/ShadowJar;Lcom/github/jengelman/gradle/plugins/shadow/relocation/Relocator;Lorg/gradle/api/Action;ILjava/lang/Object;)V
	public static synthetic fun relocate$default (Lcom/github/jengelman/gradle/plugins/shadow/tasks/ShadowJar;Ljava/lang/Class;Lorg/gradle/api/Action;ILjava/lang/Object;)V
	public static synthetic fun relocate$default (Lcom/github/jengelman/gradle/plugins/shadow/tasks/ShadowJar;Ljava/lang/String;Ljava/lang/String;Lorg/gradle/api/Action;ILjava/lang/Object;)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer;Lorg/gradle/api/Action;)V
	public fun transform (Ljava/lang/Class;Lorg/gradle/api/Action;)V
	public static synthetic fun transform$default (Lcom/github/jengelman/gradle/plugins/shadow/tasks/ShadowJar;Lcom/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer;Lorg/gradle/api/Action;ILjava/lang/Object;)V
	public static synthetic fun transform$default (Lcom/github/jengelman/gradle/plugins/shadow/tasks/ShadowJar;Ljava/lang/Class;Lorg/gradle/api/Action;ILjava/lang/Object;)V
}

public class com/github/jengelman/gradle/plugins/shadow/transformers/ApacheLicenseResourceTransformer : com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer {
	public fun <init> ()V
	public fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	public fun getName ()Ljava/lang/String;
	public fun getObjectFactory ()Lorg/gradle/api/model/ObjectFactory;
	public fun hasTransformedResource ()Z
	public fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

public class com/github/jengelman/gradle/plugins/shadow/transformers/ApacheNoticeResourceTransformer : com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer {
	public fun <init> (Lorg/gradle/api/model/ObjectFactory;)V
	public fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	public fun getAddHeader ()Lorg/gradle/api/provider/Property;
	public fun getCharsetName ()Lorg/gradle/api/provider/Property;
	public fun getCopyright ()Lorg/gradle/api/provider/Property;
	public fun getInceptionYear ()Lorg/gradle/api/provider/Property;
	public final fun getObjectFactory ()Lorg/gradle/api/model/ObjectFactory;
	public fun getOrganizationName ()Lorg/gradle/api/provider/Property;
	public fun getOrganizationURL ()Lorg/gradle/api/provider/Property;
	public fun getPreamble1 ()Lorg/gradle/api/provider/Property;
	public fun getPreamble2 ()Lorg/gradle/api/provider/Property;
	public fun getPreamble3 ()Lorg/gradle/api/provider/Property;
	public fun getProjectName ()Lorg/gradle/api/provider/Property;
	public fun hasTransformedResource ()Z
	public fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

public class com/github/jengelman/gradle/plugins/shadow/transformers/AppendingTransformer : com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer {
	public static final field Companion Lcom/github/jengelman/gradle/plugins/shadow/transformers/AppendingTransformer$Companion;
	public static final field DEFAULT_SEPARATOR Ljava/lang/String;
	public fun <init> (Lorg/gradle/api/model/ObjectFactory;)V
	public fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	public final fun getObjectFactory ()Lorg/gradle/api/model/ObjectFactory;
	public fun getResource ()Lorg/gradle/api/provider/Property;
	public fun getSeparator ()Lorg/gradle/api/provider/Property;
	public fun hasTransformedResource ()Z
	public fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

public final class com/github/jengelman/gradle/plugins/shadow/transformers/AppendingTransformer$Companion {
}

public abstract interface annotation class com/github/jengelman/gradle/plugins/shadow/transformers/CacheableTransformer : java/lang/annotation/Annotation {
}

public class com/github/jengelman/gradle/plugins/shadow/transformers/ComponentsXmlResourceTransformer : com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer {
	public static final field COMPONENTS_XML_PATH Ljava/lang/String;
	public static final field Companion Lcom/github/jengelman/gradle/plugins/shadow/transformers/ComponentsXmlResourceTransformer$Companion;
	public fun <init> ()V
	public fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	public fun hasTransformedResource ()Z
	public fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

public final class com/github/jengelman/gradle/plugins/shadow/transformers/ComponentsXmlResourceTransformer$Companion {
}

public class com/github/jengelman/gradle/plugins/shadow/transformers/DontIncludeResourceTransformer : com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer {
	public fun <init> (Lorg/gradle/api/model/ObjectFactory;)V
	public fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	public fun getName ()Ljava/lang/String;
	public final fun getObjectFactory ()Lorg/gradle/api/model/ObjectFactory;
	public fun getResource ()Lorg/gradle/api/provider/Property;
	public fun hasTransformedResource ()Z
	public fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

public class com/github/jengelman/gradle/plugins/shadow/transformers/GroovyExtensionModuleTransformer : com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer {
	public static final field Companion Lcom/github/jengelman/gradle/plugins/shadow/transformers/GroovyExtensionModuleTransformer$Companion;
	public static final field KEY_EXTENSION_CLASSES Ljava/lang/String;
	public static final field KEY_MODULE_NAME Ljava/lang/String;
	public static final field KEY_MODULE_VERSION Ljava/lang/String;
	public static final field KEY_STATIC_EXTENSION_CLASSES Ljava/lang/String;
	public static final field MERGED_MODULE_NAME Ljava/lang/String;
	public static final field MERGED_MODULE_VERSION Ljava/lang/String;
	public static final field PATH_GROOVY_EXTENSION_MODULE_DESCRIPTOR Ljava/lang/String;
	public static final field PATH_LEGACY_GROOVY_EXTENSION_MODULE_DESCRIPTOR Ljava/lang/String;
	public fun <init> ()V
	public fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	public fun hasTransformedResource ()Z
	public fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

public final class com/github/jengelman/gradle/plugins/shadow/transformers/GroovyExtensionModuleTransformer$Companion {
}

public class com/github/jengelman/gradle/plugins/shadow/transformers/IncludeResourceTransformer : com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer {
	public fun <init> (Lorg/gradle/api/model/ObjectFactory;)V
	public fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	public fun getFile ()Lorg/gradle/api/file/RegularFileProperty;
	public fun getName ()Ljava/lang/String;
	public final fun getObjectFactory ()Lorg/gradle/api/model/ObjectFactory;
	public fun getResource ()Lorg/gradle/api/provider/Property;
	public fun hasTransformedResource ()Z
	public fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

public class com/github/jengelman/gradle/plugins/shadow/transformers/Log4j2PluginsCacheFileTransformer : com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer {
	public fun <init> ()V
	public fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	public fun hasTransformedResource ()Z
	public fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

public class com/github/jengelman/gradle/plugins/shadow/transformers/ManifestAppenderTransformer : com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer {
	public fun <init> (Lorg/gradle/api/model/ObjectFactory;)V
	public fun append (Ljava/lang/String;Ljava/lang/Comparable;)V
	public fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	public fun getAttributes ()Lorg/gradle/api/provider/SetProperty;
	public final fun getObjectFactory ()Lorg/gradle/api/model/ObjectFactory;
	public fun hasTransformedResource ()Z
	public fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

public class com/github/jengelman/gradle/plugins/shadow/transformers/ManifestResourceTransformer : com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer {
	public fun <init> (Lorg/gradle/api/model/ObjectFactory;)V
	public fun attributes (Ljava/util/Map;)V
	public fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	public fun getMainClass ()Lorg/gradle/api/provider/Property;
	public fun getManifestEntries ()Lorg/gradle/api/provider/MapProperty;
	public final fun getObjectFactory ()Lorg/gradle/api/model/ObjectFactory;
	public fun hasTransformedResource ()Z
	public fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

public class com/github/jengelman/gradle/plugins/shadow/transformers/PreserveFirstFoundResourceTransformer : com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer {
	public fun <init> (Lorg/gradle/api/model/ObjectFactory;)V
	public fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	protected final fun getFound ()Ljava/util/Set;
	public fun getName ()Ljava/lang/String;
	public final fun getObjectFactory ()Lorg/gradle/api/model/ObjectFactory;
	public fun getResources ()Lorg/gradle/api/provider/SetProperty;
	public fun hasTransformedResource ()Z
	public fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

public class com/github/jengelman/gradle/plugins/shadow/transformers/PropertiesFileTransformer : com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer {
	public fun <init> (Lorg/gradle/api/model/ObjectFactory;)V
	public fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	public fun getCharsetName ()Lorg/gradle/api/provider/Property;
	public fun getKeyTransformer ()Lkotlin/jvm/functions/Function1;
	public fun getMappings ()Lorg/gradle/api/provider/MapProperty;
	public fun getMergeSeparator ()Lorg/gradle/api/provider/Property;
	public fun getMergeStrategy ()Lorg/gradle/api/provider/Property;
	public final fun getObjectFactory ()Lorg/gradle/api/model/ObjectFactory;
	public fun getPaths ()Lorg/gradle/api/provider/SetProperty;
	public fun hasTransformedResource ()Z
	public fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public fun setKeyTransformer (Lkotlin/jvm/functions/Function1;)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

public final class com/github/jengelman/gradle/plugins/shadow/transformers/PropertiesFileTransformer$MergeStrategy : java/lang/Enum {
	public static final field Append Lcom/github/jengelman/gradle/plugins/shadow/transformers/PropertiesFileTransformer$MergeStrategy;
	public static final field Companion Lcom/github/jengelman/gradle/plugins/shadow/transformers/PropertiesFileTransformer$MergeStrategy$Companion;
	public static final field First Lcom/github/jengelman/gradle/plugins/shadow/transformers/PropertiesFileTransformer$MergeStrategy;
	public static final field Latest Lcom/github/jengelman/gradle/plugins/shadow/transformers/PropertiesFileTransformer$MergeStrategy;
	public static final fun from (Ljava/lang/String;)Lcom/github/jengelman/gradle/plugins/shadow/transformers/PropertiesFileTransformer$MergeStrategy;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lcom/github/jengelman/gradle/plugins/shadow/transformers/PropertiesFileTransformer$MergeStrategy;
	public static fun values ()[Lcom/github/jengelman/gradle/plugins/shadow/transformers/PropertiesFileTransformer$MergeStrategy;
}

public final class com/github/jengelman/gradle/plugins/shadow/transformers/PropertiesFileTransformer$MergeStrategy$Companion {
	public final fun from (Ljava/lang/String;)Lcom/github/jengelman/gradle/plugins/shadow/transformers/PropertiesFileTransformer$MergeStrategy;
}

public abstract interface class com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer : org/gradle/api/Named {
	public static final field Companion Lcom/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer$Companion;
	public abstract fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	public static fun create (Ljava/lang/Class;Lorg/gradle/api/model/ObjectFactory;)Lcom/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer;
	public fun getName ()Ljava/lang/String;
	public fun getObjectFactory ()Lorg/gradle/api/model/ObjectFactory;
	public abstract fun hasTransformedResource ()Z
	public abstract fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public abstract fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

public final class com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer$Companion : com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer {
	public fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	public final fun create (Ljava/lang/Class;Lorg/gradle/api/model/ObjectFactory;)Lcom/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer;
	public fun hasTransformedResource ()Z
	public fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

public class com/github/jengelman/gradle/plugins/shadow/transformers/ServiceFileTransformer : com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer, org/gradle/api/tasks/util/PatternFilterable {
	public fun <init> ()V
	public fun <init> (Lorg/gradle/api/tasks/util/PatternSet;)V
	public synthetic fun <init> (Lorg/gradle/api/tasks/util/PatternSet;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	public fun exclude (Lgroovy/lang/Closure;)Lorg/gradle/api/tasks/util/PatternFilterable;
	public fun exclude (Ljava/lang/Iterable;)Lorg/gradle/api/tasks/util/PatternFilterable;
	public fun exclude (Lorg/gradle/api/specs/Spec;)Lorg/gradle/api/tasks/util/PatternFilterable;
	public fun exclude ([Ljava/lang/String;)Lorg/gradle/api/tasks/util/PatternFilterable;
	public fun getExcludes ()Ljava/util/Set;
	public fun getIncludes ()Ljava/util/Set;
	public fun getPath ()Ljava/lang/String;
	public fun hasTransformedResource ()Z
	public fun include (Lgroovy/lang/Closure;)Lorg/gradle/api/tasks/util/PatternFilterable;
	public fun include (Ljava/lang/Iterable;)Lorg/gradle/api/tasks/util/PatternFilterable;
	public fun include (Lorg/gradle/api/specs/Spec;)Lorg/gradle/api/tasks/util/PatternFilterable;
	public fun include ([Ljava/lang/String;)Lorg/gradle/api/tasks/util/PatternFilterable;
	public fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public fun setExcludes (Ljava/lang/Iterable;)Lorg/gradle/api/tasks/util/PatternFilterable;
	public fun setIncludes (Ljava/lang/Iterable;)Lorg/gradle/api/tasks/util/PatternFilterable;
	public fun setPath (Ljava/lang/String;)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

public final class com/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext {
	public static final field Companion Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext$Companion;
	public fun <init> (Ljava/lang/String;Ljava/io/InputStream;)V
	public fun <init> (Ljava/lang/String;Ljava/io/InputStream;Ljava/util/Set;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/io/InputStream;Ljava/util/Set;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun builder ()Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext$Builder;
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/io/InputStream;
	public final fun component3 ()Ljava/util/Set;
	public final fun copy (Ljava/lang/String;Ljava/io/InputStream;Ljava/util/Set;)Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;
	public static synthetic fun copy$default (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;Ljava/lang/String;Ljava/io/InputStream;Ljava/util/Set;ILjava/lang/Object;)Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getInputStream ()Ljava/io/InputStream;
	public final fun getPath ()Ljava/lang/String;
	public final fun getRelocators ()Ljava/util/Set;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext$Builder {
	public fun <init> ()V
	public final fun build ()Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;
	public final fun inputStream (Ljava/io/InputStream;)Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext$Builder;
	public final fun path (Ljava/lang/String;)Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext$Builder;
	public final fun relocators (Ljava/util/Set;)Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext$Builder;
}

public final class com/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext$Companion {
	public final fun builder ()Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext$Builder;
}

public class com/github/jengelman/gradle/plugins/shadow/transformers/XmlAppendingTransformer : com/github/jengelman/gradle/plugins/shadow/transformers/ResourceTransformer {
	public fun <init> (Lorg/gradle/api/model/ObjectFactory;)V
	public fun canTransformResource (Lorg/gradle/api/file/FileTreeElement;)Z
	public fun getIgnoreDtd ()Lorg/gradle/api/provider/Property;
	public final fun getObjectFactory ()Lorg/gradle/api/model/ObjectFactory;
	public fun getResource ()Lorg/gradle/api/provider/Property;
	public fun hasTransformedResource ()Z
	public fun modifyOutputStream (Lorg/apache/tools/zip/ZipOutputStream;Z)V
	public fun transform (Lcom/github/jengelman/gradle/plugins/shadow/transformers/TransformerContext;)V
}

