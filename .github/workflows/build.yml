name: Build

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: OS=${{ matrix.os }}, Java=${{ matrix.java }}, Gradle=${{ matrix.gradle }}
    strategy:
      matrix:
        os: [ ubuntu-24.04-arm ]
        # Always test on the latest version and some LTS.
        java: [ 17, 24 ]
        # Test on the minimum Gradle version and the latest.
        gradle: [ 8.11, current ]
        exclude:
          # Gradle 8.11 doesn't support Java 24.
          - gradle: 8.11
            java: 24
        include:
          # We just test one JDK version on Windows.
          - os: windows-latest
            gradle: 8.11
            java: 21
          - os: windows-latest
            gradle: current
            java: 21
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}
      - uses: gradle/actions/setup-gradle@v4
      - run: ./gradlew build "-PtestGradleVersion=${{ matrix.gradle }}" --stacktrace -x lint

  # TODO: https://issuetracker.google.com/issues/438361087
  lint:
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 21
      - uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true
      - run: ./gradlew lint

  # Status check that is required in branch protection rules.
  build-status:
    needs:
      - build
      - lint
    runs-on: ubuntu-24.04-arm
    if: always()
    steps:
      - name: Check results
        env:
          NEEDS_JSON: ${{ toJSON(needs) }}
        run: |
          python3 - <<'PY'
          import json, os, sys
          needs = json.loads(os.environ['NEEDS_JSON'] or "{}")
          failures = []
          for name, meta in needs.items():
              result = (meta or {}).get("result")
              print(f" - {name}: {result}")
              if result == "failure":
                  failures.append((name, result))
          if failures:
              print("One or more required jobs failed:", file=sys.stderr)
              for name, result in failures:
                  print(f"   {name}: {result}", file=sys.stderr)
              sys.exit(1)
          print("All required jobs passed (no failures detected).")
          PY

  publish-snapshot:
    needs: build
    runs-on: ubuntu-24.04-arm
    if: github.event.repository.fork == false && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 21
      - uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true
      - run: ./gradlew publishToMavenCentral
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.CENTRAL_PORTAL_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.CENTRAL_PORTAL_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.GPG_KEY_PASSWORD }}
      - uses: actions/upload-artifact@v4
        with:
          path: build/libs
          if-no-files-found: 'error'
